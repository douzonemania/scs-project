<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="product">

	<select id="getItemNo" parameterType="map" resultType="Integer">		
				<![CDATA[
					select no from ${db}.item where code=#{code}
				]]>
	</select>
	
	<select id="getItemListCount" parameterType="map" resultType="int">
		<choose>
				<when test='option==""'>
					<![CDATA[
						select count(*)
						  from ${db}.item
						 where state=true
					]]>
				</when>
				<when test="option == 'category'">
					<![CDATA[
						 select count(*)
						   from ${db}.item i, ${db}.category c
						  where i.category_no = c.no
		                    and i.state = true
		                    and c.parents_no is not null
		                    and c.name=#{keyword}
	                ]]>
				</when>
				<when test="option == 'visible'">
					<![CDATA[
						 select count(*)
						   from ${db}.item
						  where visible=${keyword}
		                    and state=true
	                ]]>
				</when>
				<otherwise>
					<![CDATA[
						select count(*)
						  from ${db}.item
						 where state=true
						   and ${option} like '%${keyword}%'
					]]>
				</otherwise>
			</choose>	
	</select>
	
	<select id="getItemList" parameterType="map" resultType="itemvo">		
				<![CDATA[
					select no, code, name, sup_price as 'supPrice', now_price as 'nowPrice', 
						sale, main_image as 'mainImage', sub_image as 'subImage', 
						visible, best_item as 'bestItem', new_item as 'newItem', editor, category_no,
						description, reg_date as 'regDate'
					from ${db}.item
					where state = true
					limit ${size} offset #{offset}
				]]>
	</select>

	
	<select id="getSearchItemList" parameterType="map" resultType="itemvo">		
				<choose>
			<when test="option == 'category'">
				<![CDATA[
					 select i.no, i.code, i.name, i.sup_price as 'supPrice', i.now_price as 'nowPrice', 
							i.sale, i.main_image as 'mainImage', i.sub_image as 'subImage', 
							i.visible, i.best_item as 'bestItem', i.new_item as 'newItem', i.editor, i.category_no,
							c.name as categoryName, i.description, i.reg_date as 'regDate'
					   from ${db}.item i, ${db}.category c
					  where i.category_no = c.no
	                    and i.state = true
	                    and c.name=#{keyword}
	                    and c.parents_no is not null
	                  limit ${size} offset #{offset}
                ]]>
			</when>
			<when test="option == 'visible'">
					<![CDATA[
						 select no, code, name, sup_price as 'supPrice', now_price as 'nowPrice', 
						sale, main_image as 'mainImage', sub_image as 'subImage', 
						visible, best_item as 'bestItem', new_item as 'newItem', editor, category_no,
						description, reg_date as 'regDate'
						   from ${db}.item
						  where visible=${keyword}
		                    and state=true
		                   limit ${size} offset #{offset}
	                ]]>
	        </when>
			<otherwise>
				<![CDATA[
					select no, code, name, sup_price as 'supPrice', now_price as 'nowPrice', 
						sale, main_image as 'mainImage', sub_image as 'subImage', 
						visible, best_item as 'bestItem', new_item as 'newItem', editor, category_no,
						description, reg_date as 'regDate'
					from ${db}.item
					where state = true
					  and ${option} like '%${keyword}%'
					limit ${size} offset #{offset}
				]]>
			</otherwise>
		</choose>
	</select>
	
	<select id="findItem" parameterType="map" resultType="itemvo">		
				<![CDATA[
					select no, code, name, sup_price as 'supPrice', now_price as 'nowPrice', 
						sale, main_image as 'mainImage', sub_image as 'subImage', 
						visible, best_item as 'bestItem', new_item as 'newItem', editor, category_no,
						description, reg_date as 'regDate', category_no as 'categoryNo', ship_company as 'shipCompany', ship_charge as 'shipCharge'
					from ${db}.item
					where no = #{no}
				]]>
	</select>
	
	<select id="getShipCompanyList" parameterType="map" resultType="shipcompanyvo">		
				<![CDATA[
					select no, name from scs2.ship_company where id = #{db}
				]]>
	</select>	

	<insert id="regItem" parameterType="map">
				<![CDATA[
					insert into ${db}.item values (null, #{iVo.code}, #{iVo.name}, #{iVo.supPrice}, #{iVo.nowPrice}, #{iVo.sale}, #{iVo.mainImage}, #{iVo.subImage}, #{iVo.visible}, #{iVo.bestItem}, #{iVo.newItem}, #{iVo.editor}, #{iVo.categoryNo}, #{iVo.description}, now(), #{iVo.shipCompany}, #{iVo.shipCharge}, true)
				]]>
	</insert>
	
	<insert id="insertStock" parameterType="map">
				<![CDATA[
					insert into ${db}.stock values (null, #{itemNo}, #{sVo.firstOption}, #{sVo.secondOption}, #{sVo.stock});
				]]>
	</insert>
	
	
	<delete id="delStock" parameterType="map">
				<![CDATA[
					delete from ${db}.stock where item_no = #{itemNo};
				]]>
	</delete>
	
	<update id="delItem" parameterType="map">
				<![CDATA[
					update ${db}.item set state = false where no = #{no};
				]]>
	</update>
	
	<update id="modItem" parameterType="map">
				<![CDATA[
					update ${db}.item set code = '${iVo.code}', name= '${iVo.name}', sup_price= ${iVo.supPrice}, now_price=${iVo.nowPrice}, sale= ${iVo.sale}, main_image='${iVo.mainImage}', sub_Image= '${iVo.subImage}', visible=${iVo.visible}, best_item= ${iVo.bestItem}, new_item= ${iVo.newItem}, editor= #{iVo.editor}, category_no = ${iVo.categoryNo}, description = '${iVo.description}', ship_company = '${iVo.shipCompany}', ship_charge=${iVo.shipCharge} where no = ${iVo.no}
				]]>
	</update>
	
		<select id="itemBoardListCount" parameterType="map" resultType="int">
			<choose>
				<when test='option==""'>
					<![CDATA[
						select ifnull(count(*),0)
						  from ${db}.item_board i,
						  	   ${db}.member m
						 where i.member_no = m.no
						   and m.state='회원'
					]]>
				</when>
				<otherwise>
					<![CDATA[
						select ifnull(count(*),0) 
						  from (select b.no,
									   b.title,
									   b.contents,
									   b.reg_date as regDate,
									   b.member_no as memberNo,
									   b.item_no as itemNo,
									   b.reply_state as replyState,
					                   i.code,
                  					   m.id
								  from ${db}.item_board b,
									   ${db}.member m,
					                   ${db}.item i
								 where b.member_no = m.no
					               and b.item_no = i.no
								   and m.state='회원') a
					               where a.${option} like '%${keyword}%'
					]]>
				</otherwise>
			</choose>
	</select>
	
	<select id="itemBoardList" parameterType="map" resultType="itemboardvo">
		<choose>
			<when test="check == 0 ">
				<![CDATA[
					select b.no,
						   b.title,
						   b.contents,
						   b.reg_date as regDate,
						   b.member_no as memberNo,
						   b.item_no as itemNo,
						   b.reply_state as replyState,
		                   i.code,
		                   m.id
					  from ${db}.item_board b,
						   ${db}.member m,
		                   ${db}.item i
					 where b.member_no = m.no
		               and b.item_no = i.no
					   and m.state='회원'
					   and b.reply_state = 0
					   order by b.reg_date desc
					 limit ${size} offset #{offset}
				]]>
			</when>
			<otherwise>
				<![CDATA[
					select b.no,
						   b.title,
						   b.contents,
						   b.reg_date as regDate,
						   b.member_no as memberNo,
						   b.item_no as itemNo,
						   b.reply_state as replyState,
		                   i.code,
		                   m.id
					  from ${db}.item_board b,
						   ${db}.member m,
		                   ${db}.item i
					 where b.member_no = m.no
		               and b.item_no = i.no
					   and m.state='회원'
					   order by b.reg_date desc
					 limit ${size} offset #{offset}
				]]>
			</otherwise>
		</choose>
	</select>
	
	<select id="searchItemBoardList" parameterType="map" resultType="itemboardvo">
		<![CDATA[
			select * 
			  from (select b.no,
						   b.title,
						   b.contents,
						   b.reg_date as regDate,
						   b.member_no as memberNo,
					 	   b.item_no as itemNo,
					 	   b.reply_state as replyState,
		                   i.code,
                   		   m.id
					  from ${db}.item_board b,
						   ${db}.member m,
		                   ${db}.item i
					 where b.member_no = m.no
		               and b.item_no = i.no
					   and m.state='회원'
					   order by b.reg_date desc) a
			 where a.${option} like '%${keyword}%'
			 limit ${size} offset #{offset}
		]]>
	</select>	
	
	<insert id="insertBoardReply" parameterType="map">
		<![CDATA[
			insert into ${db}.item_reply
			values(null, #{parentsNo}, #{contents}, now()) 
		]]>
	</insert>
	
	<update id="updateBoardReply" parameterType="map">
		<![CDATA[
			update ${db}.item_board
			   set reply_state=#{state}
			 where no = #{no} 
		]]>
	</update>
	
	<select id="findItemBoardByNo" parameterType="map" resultType="itemboardvo">
		<![CDATA[
			select no,
				   title,
				   contents,
				   reg_date as regDate,
				   member_no as memberNo,
				   item_no as itemNo,
				   reply_state as replyState
			  from ${db}.item_board
			 where no=#{no}
		]]>
	</select>
	
	<select id="findNameByNo" parameterType="map" resultType="string">
		<![CDATA[
			select name
			  from ${db}.member
			 where no=#{no}		
		]]>
	</select>
	
	<select id="findItemReplyByParentsNo" parameterType="map" resultType="itemreplyvo">
		<![CDATA[
			select no,
				   parents_no as parentsNo,
				   contents,
				   reg_date as regDate
			  from ${db}.item_reply
			 where parents_no = #{no}
		 ]]>
	</select>
	
	<delete id="deleteItemBoard" parameterType="map">
		<![CDATA[
			delete
			  from ${db}.item_board
			 where no=#{no}
			   and reply_state=false
		]]>
	</delete>
	
	<delete id="deleteItemBoardReply" parameterType="map">
		<![CDATA[
			delete from ${db}.item_reply
			 where parents_no=#{no}
		]]>
	</delete>
	
	<select id="getStatisticsByItemNo" parameterType="map" resultType="productstatisticsvo">
		<![CDATA[
			  select count(*) as 'count', DATE_FORMAT(shop_order.reg_date,'%Y-%m-%d') as 'date'
			  from ${db}.stock, ${db}.order_item, ${db}.shop_order, ${db}.item
			 where stock.no = order_item.stock_no
			   and order_item.order_no = shop_order.no
			   and item.no = stock.item_no
			   and item.no = #{no }
			   and shop_order.reg_date >= #{date1 }
			   and shop_order.reg_date <= #{date2 }
			   group by DATE_FORMAT(shop_order.reg_date,'%Y-%m-%d')
		]]>
	</select>
	
	<select id="getShippingcharge" parameterType="map" resultType="Integer">
		<![CDATA[
			select ship_charge from scs2.site where id=#{id}		
		]]>
	</select>
			
</mapper>

